// $Id$

#include "commonheaders.hpp"

#include <cstdio>
#include <cstring>
#include "../iotools/fileio.hpp"

using namespace NRLib2;
/// Table with EBCDIC-values for the different ASCII values.
/// Values not found in EBCDIC are set to 0x00.
/// Taken from SEG Y rev 1 standard.
const unsigned char transtab[] =
// 0     1     2     3     4     5     6     7   
{0x00, 0x01, 0x02, 0x03, 0x37, 0x2d, 0x2e, 0x2f, 
 0x16, 0x05, 0x25, 0x0b, 0x0c, 0x0d, 0x00, 0x00,
 0x10, 0x11, 0x12, 0x13, 0x3c, 0x3d, 0x32, 0x26,
 0x18, 0x00, 0x3f, 0x27, 0x1c, 0x1d, 0x1e, 0x1f,
 0x40, 0x5a, 0x7f, 0x7b, 0x5b, 0x6c, 0x50, 0x7d,
 0x4d, 0x5d, 0x5c, 0x4e, 0x6b, 0x60, 0x4b, 0x61,
 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
 0xf8, 0xf9, 0x7a, 0x5e, 0x4c, 0x7e, 0x6e, 0x6f,
 0x7c, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
 0xc8, 0xc9, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
 0xd7, 0xd8, 0xd9, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6,
 0xe7, 0xe8, 0xe9, 0x00, 0xe0, 0x00, 0x00, 0x6d,
 0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
 0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
 0x97, 0x98, 0x99, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6,
 0xa7, 0xa8, 0xa9, 0xc0, 0x4f, 0xd0, 0xa1, 0x07
 };

/// Translates an ASCII character to EBCDIC.
unsigned char ascii2ebcdic(unsigned char c)
{
  if (c > 128) 
    return 0;
  return transtab[c];
}

void emptyHeader(char * ebcdicH)
{
  sprintf(&(ebcdicH[0]),   "√@Ò@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[80]),  "√@Ú@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[160]), "√@Û@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[240]), "√@Ù@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[320]), "√@ı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[400]), "√@ˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[480]), "√@˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[560]), "√@¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[640]), "√@˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[720]), "√Ò@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[800]), "√ÒÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[880]), "√ÒÚ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[960]), "√ÒÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1040]),"√ÒÙ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1120]),"√Òı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1200]),"√Òˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1280]),"√Ò˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1360]),"√Ò¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1440]),"√Ò˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1520]),"√Ú@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1600]),"√ÚÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1680]),"√ÚÚ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1760]),"√ÚÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1840]),"√ÚÙ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1920]),"√Úı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2000]),"√Úˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2080]),"√Ú˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2160]),"√Ú¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2240]),"√Ú˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2320]),"√Û@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2400]),"√ÛÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2480]),"√ÛÚ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2560]),"√ÛÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2640]),"√ÛÙ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2720]),"√Ûı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2800]),"√Ûˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2880]),"√Û˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2960]),"√Û¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[3040]),"√Û˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[3120]),"√Ù@≈’ƒ@≈¬√ƒ…√@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  ebcdicH[3199]='@';
}

void oldHeader(char * ebcdicH)
{
  sprintf(&(ebcdicH[0]),  "√@Ò@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[80]), "√@Ú@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[160]),"√@Û@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[240]),"√@Ù@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[320]),"√@ı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[400]),"√@ˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[480]),"√@˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[560]),"√@¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[640]),"√@˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[720]),"√Ò@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[800]),"√ÒÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[880]),"√ÒÚ@@@@@@@@@„»…‚@‚≈«Ë@∆…”≈@Ê¡‚@ÊŸ…„„≈’@¬Ë@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[960]),"√ÒÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1040]),"√ÒÙ@@@@@@@@@„»≈@√Ÿ¡Â¡@◊Ÿ÷«Ÿ¡‘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1120]),"√Òı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1200]),"√Òˆ@@@@@@@@@ƒ≈Â≈”÷◊≈ƒ@¬Ë@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1280]),"√Ò˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1360]),"√Ò¯@@@@@@@@@Ÿ¡«’¡Ÿ@»¡‰«≈@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1440]),"√Ò˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1520]),"√Ú@@@@@@@@@¡’’≈@Ÿ¡’ƒ…@‚ËÂ≈Ÿ‚Â≈≈’@@@@@@@@@@@¡’ƒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1600]),"√ÚÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1680]),"√ÚÚ@@@@@@@@@÷ƒƒ@“÷”¬—÷Ÿ’‚≈’@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1760]),"√ÚÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1840]),"√ÚÙ@@@@@@@@@¡„@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[1920]),"√Úı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2000]),"√Úˆ@@@@@@@@@„»≈@’÷ŸÊ≈«…¡’@√÷‘◊‰„…’«@√≈’„≈Ÿ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2080]),"√Ú˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2160]),"√Ú¯@@@@@@@@@ÚÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2240]),"√Ú˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2320]),"√Û@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2400]),"√ÛÒ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2480]),"√ÛÚ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2560]),"√ÛÛ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2640]),"√ÛÙ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2720]),"√Ûı@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2800]),"√Ûˆ@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2880]),"√Û˜@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[2960]),"√Û¯@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[3040]),"√Û˘@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  sprintf(&(ebcdicH[3120]),"√Ù@≈’ƒ@≈¬√ƒ…√@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  ebcdicH[3199]='@';
}

TextualHeader::TextualHeader()
{
  emptyHeader(reinterpret_cast<char *>(&buffer_[0]));
  buffer_[3199] = '@';
}

TextualHeader TextualHeader::standardHeader()
{
  TextualHeader header;
  oldHeader(reinterpret_cast<char*>(&header.buffer_[0]));
  return header;
}

int TextualHeader::setLine(int lineNo, const char* text) 
{
  int retCode = 0;

  // Don't allow modification of last line.
  if (lineNo < 0 || lineNo > 39) {
    return -1;
  }

  int length = int(strlen(text));
  if (length > 75) {
    length = 75;
    retCode = 1;
  }
  
  int pos = lineNo*80 + 5;
  for (int i = 0; i < length; ++i) {
    buffer_[pos + i] = ascii2ebcdic(text[i]);
  }
  for (int i = length; i < 75; ++i) {
    buffer_[pos + i] = ascii2ebcdic(' ');
  }

  return retCode;
}

void TextualHeader::write(std::ostream& file) const
{
  //fwrite(buffer_, 1, 3200, file);
  char buffer[3200];
  int i;
  for(i=0;i<3200;i++)
    buffer[i] = buffer_[i];
  file.write(buffer,3200);
}

BinaryHeader::BinaryHeader(std::istream& file)
{
 
  Update(file);
}
BinaryHeader::BinaryHeader()
{
}

void
BinaryHeader::Update(std::istream& file)
{
  int dummy;
  short dummy2;
  dummy = ReadBinaryInt(file);
  lino_ = ReadBinaryInt(file);
  dummy = ReadBinaryInt(file);
  dummy2 = ReadBinaryShort(file);
  dummy2 = ReadBinaryShort(file);
  hdt_ = ReadBinaryShort(file); ///=dz
  dummy2 = ReadBinaryShort(file);
  hns_ = ReadBinaryShort(file); ///=nz
  dummy2 = ReadBinaryShort(file);
  format_ = ReadBinaryShort(file);
  
  char buffer[374];
  file.read(buffer,374);
}

void BinaryHeader::write(std::ostream& file, SegyGeometry *geometry, double dz, int nz) const
{
  int dummy = 9999;
  WriteBinaryInt(file,dummy);
  dummy = 1;
  WriteBinaryInt(file,dummy);
  
  WriteBinaryInt(file,dummy);
  short dummy2;
  if(geometry!=NULL)
    dummy2 = short(geometry->getNx());
  else
    dummy2 = 0;
  WriteBinaryShort(file,dummy2);
  dummy2 = 0;
  WriteBinaryShort(file, dummy2);
  WriteBinaryShort(file, 1000*dz); // Hdt
  WriteBinaryShort(file, dummy2);
  WriteBinaryShort(file, nz); ///=nz Hns
  WriteBinaryShort(file, dummy2);
  WriteBinaryShort(file, dummy); // format
  dummy2 = 1;
  WriteBinaryShort(file, dummy2);
  dummy2 = 4;
  WriteBinaryShort(file, dummy2);
  dummy2 = 0;
  int i;
  for(i=0;i<12;i++)
    WriteBinaryShort(file, dummy2);
  dummy2 = 1;
  WriteBinaryShort(file, dummy2);
  char buffer[344];
  memset(buffer, 0, 344);
  file.write(buffer,344);
}
