#
# The available CRAVA compiler directives are
#    -DBIGENDIAN   (needed for IRIX, SUNOS, etc...)  
#
CDIR       = 
CXX        = g++
CC         = gcc
GCCWARNING = -Wall -pedantic -Wno-long-long -Werror
#
# The directive -fno-strict-aliasing has been included to avoid a following compilator error:
# segy/traceheader.cpp: In member function ‘int NRLib::TraceHeader::GetInt32(int) const’:
# segy/traceheader.cpp:519: error: dereferencing type-punned pointer will break strict-aliasing rules
# 
GXXWARNING = -Wall -pedantic -Woverloaded-virtual -Wno-long-long -Wold-style-cast -Werror -fno-strict-aliasing
PROGRAM    = cravarun
GRAMMAR    = grammar
OPT        = -O2
DEBUG      =
PURIFY     = 
mode       = all

ifeq ($(mode),debug)
# Don't use -O2 (makes it impossible to set breakpoints)
DEBUG = -g
OPT   = -O0
endif

ifeq ($(mode),profile)
# Don't use -ggdb here
DEBUG   = -g 
PROFILE = -pg
endif

ifeq ($(mode),purify)
# Don't use -ggdb here
DEBUG   = -g
OPT     = -O0
PROGRAM = cravarun.purify
PURIFY  = purify -best-effort
endif

OPT     := $(strip $(OPT))
PROFILE := $(strip $(PROFILE))
DEBUG   := $(strip $(DEBUG))
CDIR    := $(strip $(CDIR))
PURIFY  := $(strip $(PURIFY))

EXTRAFLAGS = $(strip $(OPT) $(PROFILE) $(DEBUG) $(CDIR))

MKLINCLUDE := /nr/prog/intel/Compiler/mkl/include
MKLPATH    := /nr/prog/intel/Compiler/mkl/lib/intel64
MKLLFLAGS  := -L$(MKLPATH) -I$(MKLINCLUDE) -Wl,--start-group $(MKLPATH)/libmkl_intel_lp64.a \
	$(MKLPATH)/libmkl_sequential.a $(MKLPATH)/libmkl_core.a -Wl,--end-group \
	-lpthread

CFLAGS     = $(GCCWARNING)
CXXFLAGS   = $(GXXWARNING) -I$(MKLINCLUDE) -DFLENS_FIRST_INDEX=0 -DMKL
CPPFLAGS   = $(EXTRAFLAGS)
LFLAGS     = $(PROFILE) $(DEBUG) $(MKLLFLAGS) -lm
